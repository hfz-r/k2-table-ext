{"version":3,"sources":["utils/fetch.js","components/Filters.js","components/Pagination.js","components/Checkbox.js","components/Menu.js","components/Table.js","components/InnerTable.js","components/Main.js","utils/transform.js"],"names":["promiseWrapper","promise","result","status","suspender","then","r","e","read","fuzzyTextFilterFn","rows","id","filterValue","matchSorter","keys","row","values","autoRemove","val","SettingIcon","className","tabIndex","width","height","viewBox","fillRule","d","DefaultColumnFilter","column","preFilteredRows","setFilter","count","length","value","onChange","target","undefined","placeholder","NumberRangeColumnFilter","useMemo","min","max","forEach","Math","type","old","parseInt","style","marginRight","marginLeft","SelectColumnFilter","options","React","Set","add","map","option","i","Pagination","gotoPage","previousPage","nextPage","canPreviousPage","canNextPage","pageCount","pageIndex","pageOptions","pageSize","setPageSize","onClick","disabled","defaultValue","page","Number","Checkbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","MENU_ID","MenuWrapper","toggleRef","menuRef","useState","visible","setVisible","handleClickOutside","useCallback","event","contains","document","addEventListener","removeEventListener","name","Header","attributes","collect","props","onMenuClick","data","setAttribute","item","role","stopPropagation","handleContextClick","rx","y","ConnectedMenu","connectMenu","columns","toggleAll","trigger","handleClick","canGroupBy","getGroupByToggleProps","isGrouped","divider","title","preventCloseOnClick","preventClose","col","idx","htmlFor","getToggleHiddenProps","Table","updateData","skipReset","renderSubComponent","filterTypes","fuzzyText","text","filter","rowValue","String","toLocaleLowerCase","startsWith","defaultColumn","Filter","useTable","autoResetPage","autoResetSelectedRows","disableMultiSort","useFilters","useGroupBy","useSortBy","useExpanded","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","toggleHideColumn","visibleColumns","allColumns","getToggleHideAllColumnsProps","state","groupBy","headerGroup","getHeaderGroupProps","headers","headerIndex","getHeaderProps","collapse","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","key","rowProps","getRowProps","Fragment","cells","cell","cellIndex","getCellProps","getToggleRowExpandedProps","isExpanded","subRows","isAggregated","isPlaceholder","parentRow","childData","accessor","backgroundColor","bodyIndex","InnerTable","parentVisibleColumns","loading","setLoading","setChildDate","timer","setTimeout","clearTimeout","colSpan","initialResource","smo","Promise","resolve","fetch","process","response","console","log","json","payload","fetchPayload","Main","resource","setResource","Cell","SubCell","Aggregated","aggregate","chain","x","InvestorID","parent","pick","children","transformPayload","find","reduce","isEqual","concat","rowIndex","columnId","index"],"mappings":"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","file":"static/js/4.3a8d70fa.chunk.js","sourcesContent":["const promiseWrapper = (promise) => {\r\n  let status = \"pending\";\r\n  let result;\r\n\r\n  const suspender = promise.then(\r\n    (r) => {\r\n      status = \"success\";\r\n      result = r;\r\n    },\r\n    (e) => {\r\n      status = \"error\";\r\n      result = e;\r\n    }\r\n  );\r\n\r\n  return {\r\n    read() {\r\n      if (status === \"pending\") {\r\n        throw suspender;\r\n      } else if (status === \"error\") {\r\n        throw result;\r\n      } else if (status === \"success\") {\r\n        return result;\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nconst fetchSMO = () => {\r\n  return new Promise((resolve) => {\r\n    fetch(process.env.REACT_APP_API_SRC, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }).then((response) => {\r\n      console.log(\"fetched payload\");\r\n      resolve(response.json());\r\n    });\r\n  });\r\n};\r\n\r\nexport function fetchPayload() {\r\n  const smo = fetchSMO();\r\n  return {\r\n    payload: promiseWrapper(smo),\r\n  };\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { matchSorter } from \"match-sorter\";\r\n\r\nconst fuzzyTextFilterFn = (rows, id, filterValue) =>\r\n  matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\r\n\r\nfuzzyTextFilterFn.autoRemove = (val) => !val;\r\n\r\nconst SettingIcon = () => (\r\n  <div className=\"header-filter-settings\">\r\n    <svg\r\n      tabIndex=\"0\"\r\n      width=\"14\"\r\n      height=\"14\"\r\n      viewBox=\"0 0 14 14\"\r\n      className=\"header-filter-settings-icon\"\r\n    >\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        d=\"M13.222 2H.778C.348 2 0 1.552 0 1s.348-1 .778-1h12.444c.43 0 .778.448.778 1s-.348 1-.778 1zM1.556 3.111l3.888 4.667v5.444c0 .43.349.778.778.778h1.556c.43 0 .778-.348.778-.778V7.778l3.888-4.667H1.556z\"\r\n      ></path>\r\n    </svg>\r\n  </div>\r\n);\r\n\r\nconst DefaultColumnFilter = ({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) => {\r\n  const count = preFilteredRows.length;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header-filter filter-text-input\">\r\n        <input\r\n          className=\"text-input__input\"\r\n          value={filterValue || \"\"}\r\n          onChange={(e) => setFilter(e.target.value || undefined)}\r\n          placeholder={`Search ${count} records`}\r\n        />\r\n      </div>\r\n      <SettingIcon />\r\n    </>\r\n  );\r\n};\r\n\r\nconst NumberRangeColumnFilter = ({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) => {\r\n  const [min, max] = useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header-filter filter-text-input\">\r\n        <input\r\n          className=\"text-input__input\"\r\n          value={filterValue[0] || \"\"}\r\n          type=\"number\"\r\n          onChange={(e) => {\r\n            const val = e.target.value;\r\n            setFilter((old = []) => [\r\n              val ? parseInt(val, 10) : undefined,\r\n              old[1],\r\n            ]);\r\n          }}\r\n          placeholder={`Min (${min})`}\r\n          style={{\r\n            width: \"70px\",\r\n            marginRight: \"0.5rem\",\r\n          }}\r\n        />\r\n        to\r\n        <input\r\n          className=\"text-input__input\"\r\n          value={filterValue[1] || \"\"}\r\n          type=\"number\"\r\n          onChange={(e) => {\r\n            const val = e.target.value;\r\n            setFilter((old = []) => [\r\n              old[0],\r\n              val ? parseInt(val, 10) : undefined,\r\n            ]);\r\n          }}\r\n          placeholder={`Max (${max})`}\r\n          style={{\r\n            width: \"70px\",\r\n            marginLeft: \"0.5rem\",\r\n          }}\r\n        />\r\n      </div>\r\n      <SettingIcon />\r\n    </>\r\n  );\r\n};\r\n\r\nconst SelectColumnFilter = ({\r\n  column: { filterValue, preFilteredRows, setFilter, id },\r\n}) => {\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header-filter filter-text-input\">\r\n        <select\r\n          className=\"text-input__input\"\r\n          value={filterValue}\r\n          onChange={(e) => {\r\n            setFilter(e.target.value || undefined);\r\n          }}\r\n        >\r\n          <option value=\"\">All</option>\r\n          {options.map((option, i) => (\r\n            <option key={i} value={option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <SettingIcon />\r\n    </>\r\n  );\r\n};\r\n\r\nDefaultColumnFilter.propTypes = {\r\n  column: PropTypes.object,\r\n};\r\n\r\nNumberRangeColumnFilter.propTypes = {\r\n  column: PropTypes.object,\r\n};\r\n\r\nSelectColumnFilter.propTypes = {\r\n  column: PropTypes.object,\r\n};\r\n\r\nexport {\r\n  fuzzyTextFilterFn,\r\n  DefaultColumnFilter,\r\n  NumberRangeColumnFilter,\r\n  SelectColumnFilter,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Pagination = ({\r\n  gotoPage,\r\n  previousPage,\r\n  nextPage,\r\n  canPreviousPage,\r\n  canNextPage,\r\n  pageCount,\r\n  pageIndex,\r\n  pageOptions,\r\n  pageSize,\r\n  setPageSize,\r\n}) => (\r\n  <>\r\n    <div className=\"pagination\">\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => gotoPage(0)}\r\n        disabled={!canPreviousPage}\r\n      >\r\n        {\"<<\"}\r\n      </button>{\" \"}\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => previousPage()}\r\n        disabled={!canPreviousPage}\r\n      >\r\n        {\"<\"}\r\n      </button>{\" \"}\r\n      <button type=\"button\" onClick={() => nextPage()} disabled={!canNextPage}>\r\n        {\">\"}\r\n      </button>{\" \"}\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => gotoPage(pageCount - 1)}\r\n        disabled={!canNextPage}\r\n      >\r\n        {\">>\"}\r\n      </button>{\" \"}\r\n      <span>\r\n        Page{\" \"}\r\n        <strong>\r\n          {pageIndex + 1} of {pageOptions.length}\r\n        </strong>{\" \"}\r\n      </span>\r\n      <span>\r\n        | Go to page:{\" \"}\r\n        <input\r\n          type=\"number\"\r\n          defaultValue={pageIndex + 1}\r\n          onChange={(e) => {\r\n            const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n            gotoPage(page);\r\n          }}\r\n          style={{ width: \"100px\" }}\r\n        />\r\n      </span>{\" \"}\r\n      <select\r\n        value={pageSize}\r\n        onChange={(e) => {\r\n          setPageSize(Number(e.target.value));\r\n        }}\r\n      >\r\n        {[10, 20, 30, 40, 50].map((pageSize) => (\r\n          <option key={pageSize} value={pageSize}>\r\n            Show {pageSize}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  </>\r\n);\r\n\r\nPagination.propTypes = {\r\n  gotoPage: PropTypes.func,\r\n  previousPage: PropTypes.func,\r\n  nextPage: PropTypes.func,\r\n  canPreviousPage: PropTypes.bool,\r\n  canNextPage: PropTypes.bool,\r\n  pageCount: PropTypes.number,\r\n  pageIndex: PropTypes.number,\r\n  pageOptions: PropTypes.array,\r\n  pageSize: PropTypes.number,\r\n  setPageSize: PropTypes.func,\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { forwardRef, useRef, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Checkbox = forwardRef(({ indeterminate, ...rest }, ref) => {\r\n  const defaultRef = useRef();\r\n  const resolvedRef = ref || defaultRef;\r\n\r\n  useEffect(() => {\r\n    resolvedRef.current.indeterminate = indeterminate;\r\n  }, [resolvedRef, indeterminate]);\r\n\r\n  return <input type=\"checkbox\" ref={resolvedRef} {...rest} />;\r\n});\r\n\r\nCheckbox.propTypes = {\r\n  indeterminate: PropTypes.number,\r\n};\r\n\r\nexport default Checkbox;\r\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  connectMenu,\r\n  ContextMenu,\r\n  ContextMenuTrigger,\r\n  MenuItem,\r\n  SubMenu,\r\n} from \"react-contextmenu\";\r\nimport PropTypes from \"prop-types\";\r\nimport IndeterminateCheckbox from \"./Checkbox\";\r\n\r\nconst MENU_ID = \"k2-table-ext-menu\";\r\n\r\nexport const MenuWrapper = ({ column }) => {\r\n  const toggleRef = useRef(null);\r\n  const menuRef = useRef(null);\r\n  const [visible, setVisible] = useState(false);\r\n  const attributes = {\r\n    \"data-tooltip\": \"Right/left click to see the menu\",\r\n    className: \"k2-table-ext-menu-group--disabled\",\r\n  };\r\n\r\n  const toggleMenu = (e) => {\r\n    setVisible(true);\r\n    if (toggleRef) {\r\n      e.stopPropagation();\r\n      toggleRef.current.handleContextClick(e);\r\n    }\r\n  };\r\n\r\n  const handleClick = (e, data, target) => {\r\n    target.setAttribute(\"data-tooltip\", `${data.item} on column ${data.name}`);\r\n  };\r\n\r\n  const handleClickOutside = useCallback(\r\n    (event) => {\r\n      if (visible && !menuRef?.current?.contains(event.target)) {\r\n        setVisible(false);\r\n      }\r\n    },\r\n    [visible]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"click\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClickOutside);\r\n    };\r\n  }, [handleClickOutside]);\r\n\r\n  return (\r\n    <>\r\n      <ContextMenuTrigger\r\n        id={MENU_ID}\r\n        ref={toggleRef}\r\n        name={column.Header}\r\n        attributes={attributes}\r\n        column={column}\r\n        collect={(props) => props}\r\n        onMenuClick={handleClick}\r\n      >\r\n        <div\r\n          ref={menuRef}\r\n          role=\"presentation\"\r\n          className={`header-menu header-menu--hover ${\r\n            visible ? \"header-menu--visible\" : \"\"\r\n          }`}\r\n          onClick={toggleMenu}\r\n        >\r\n          <svg\r\n            width=\"14\"\r\n            height=\"12\"\r\n            viewBox=\"0 0 14 12\"\r\n            className=\"sort-icon-desc\"\r\n          >\r\n            <g fillRule=\"evenodd\">\r\n              <rect width=\"14\" height=\"2\" rx=\"1\" />\r\n              <rect width=\"14\" height=\"2\" y=\"5\" rx=\"1\" />\r\n              <rect width=\"14\" height=\"2\" y=\"10\" rx=\"1\" />\r\n            </g>\r\n          </svg>\r\n        </div>\r\n      </ContextMenuTrigger>\r\n    </>\r\n  );\r\n};\r\n\r\nMenuWrapper.propTypes = {\r\n  column: PropTypes.object,\r\n};\r\n\r\nconst Menu = (props) => {\r\n  const { id, columns, toggleAll, trigger } = props;\r\n  const column = trigger ? trigger.column : null;\r\n  const handleClick = trigger ? trigger.onMenuClick : null;\r\n\r\n  return (\r\n    <ContextMenu id={id}>\r\n      {column && column.canGroupBy ? (\r\n        <span {...column.getGroupByToggleProps()}>\r\n          <MenuItem\r\n            data={{ item: column.isGrouped ? \"Ungroup\" : \"Group\" }}\r\n            onClick={handleClick}\r\n          >\r\n            {column.isGrouped ? \"Ungroup\" : \"Group\"}\r\n          </MenuItem>\r\n        </span>\r\n      ) : null}\r\n      {trigger && <MenuItem divider />}\r\n      {trigger && (\r\n        <SubMenu title=\"Columns\" preventCloseOnClick>\r\n          <MenuItem preventClose>\r\n            <IndeterminateCheckbox {...toggleAll()} /> Toggle All\r\n          </MenuItem>\r\n          {columns.map(\r\n            (col, idx) =>\r\n              col.id !== \"expander\" && (\r\n                <MenuItem key={`item-${idx}`} preventClose>\r\n                  <label htmlFor=\"checkbox\">\r\n                    <input type=\"checkbox\" {...col.getToggleHiddenProps()} />{\" \"}\r\n                    {col.Header}\r\n                  </label>\r\n                </MenuItem>\r\n              )\r\n          )}\r\n        </SubMenu>\r\n      )}\r\n    </ContextMenu>\r\n  );\r\n};\r\n\r\nMenu.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  trigger: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    column: PropTypes.shape.isRequired,\r\n    onMenuClick: PropTypes.func.isRequired,\r\n  }),\r\n  columns: PropTypes.array,\r\n  toggleAll: PropTypes.func,\r\n};\r\n\r\nexport const ConnectedMenu = connectMenu(MENU_ID)(Menu);\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  useExpanded,\r\n  useFilters,\r\n  useGroupBy,\r\n  usePagination,\r\n  useTable,\r\n  useSortBy,\r\n} from \"react-table\";\r\nimport { fuzzyTextFilterFn, DefaultColumnFilter } from \"./Filters\";\r\nimport Pagination from \"./Pagination\";\r\nimport { ConnectedMenu, MenuWrapper } from \"./Menu\";\r\n\r\nconst Table = ({\r\n  columns,\r\n  data,\r\n  updateData,\r\n  skipReset,\r\n  renderSubComponent,\r\n}) => {\r\n  const filterTypes = useMemo(\r\n    () => ({\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter((row) => {\r\n          const rowValue = row.values[id];\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLocaleLowerCase()\r\n                .startsWith(String(filterValue).toLocaleLowerCase())\r\n            : true;\r\n        });\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  const defaultColumn = useMemo(\r\n    () => ({\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    []\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    prepareRow,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    toggleHideColumn,\r\n    visibleColumns,\r\n    allColumns,\r\n    getToggleHideAllColumnsProps,\r\n    state: { pageIndex, pageSize, groupBy },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      filterTypes,\r\n      updateData,\r\n      autoResetPage: !skipReset,\r\n      autoResetSelectedRows: !skipReset,\r\n      disableMultiSort: true,\r\n    },\r\n    useFilters,\r\n    useGroupBy,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination\r\n  );\r\n\r\n  useEffect(() => {\r\n    toggleHideColumn(\"expander\", !!groupBy.length);\r\n  }, [groupBy, toggleHideColumn]);\r\n\r\n  return (\r\n    <>\r\n      <ConnectedMenu\r\n        columns={allColumns}\r\n        toggleAll={getToggleHideAllColumnsProps}\r\n      />\r\n      <div className=\"tableWrap\">\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr\r\n                key={`headerrow-${headerGroup.key}`}\r\n                {...headerGroup.getHeaderGroupProps()}\r\n              >\r\n                {headerGroup.headers.map((column, headerIndex) => (\r\n                  <th\r\n                    key={`headercol-${headerIndex}`}\r\n                    {...column.getHeaderProps({\r\n                      className: column.collapse ? \"collapse\" : \"\",\r\n                    })}\r\n                  >\r\n                    <div className=\"column-wrapper\">\r\n                      <div className=\"column-header\">\r\n                        <div\r\n                          {...column.getSortByToggleProps()}\r\n                          className=\"header-content\"\r\n                        >\r\n                          {column.render(\"Header\")}\r\n                          <div className=\"sort-icon-wrapper\">\r\n                            {column.isSorted ? (\r\n                              <>\r\n                                <svg\r\n                                  width=\"10\"\r\n                                  height=\"5\"\r\n                                  viewBox=\"0 0 10 5\"\r\n                                  className={`sort-icon sort-icon--asc ${\r\n                                    !column.isSortedDesc && \"sort-icon--active\"\r\n                                  }`}\r\n                                >\r\n                                  <path\r\n                                    fillRule=\"evenodd\"\r\n                                    d=\"M4.767.276L8.395 4.04c.142.147.138.382-.01.524-.069.066-.16.104-.257.104H.872c-.205 0-.37-.166-.37-.37 0-.097.036-.189.103-.258L4.233.276c.142-.147.377-.151.524-.009l.01.01z\"\r\n                                  ></path>\r\n                                </svg>\r\n                                <svg\r\n                                  width=\"10\"\r\n                                  height=\"5\"\r\n                                  viewBox=\"0 0 10 5\"\r\n                                  className={`sort-icon sort-icon--desc ${\r\n                                    column.isSortedDesc && \"sort-icon--active\"\r\n                                  }`}\r\n                                >\r\n                                  <path\r\n                                    fillRule=\"evenodd\"\r\n                                    d=\"M4.233 4.724L.605.96C.463.814.467.579.615.437.684.371.775.333.872.333h7.256c.205 0 .37.166.37.37 0 .097-.036.189-.103.258L4.767 4.724c-.142.147-.377.151-.524.009l-.01-.01z\"\r\n                                  ></path>\r\n                                </svg>\r\n                              </>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        {column.id !== \"expander\" && (\r\n                          <MenuWrapper\r\n                            key={`menu-${headerIndex}`}\r\n                            column={column}\r\n                          />\r\n                        )}\r\n                      </div>\r\n                      {/* Render the columns filter UI */}\r\n                      <div className=\"header-filter-wrapper\">\r\n                        {column.canFilter ? column.render(\"Filter\") : null}\r\n                      </div>\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row) => {\r\n              prepareRow(row);\r\n              const rowProps = row.getRowProps();\r\n              return (\r\n                <React.Fragment key={`bodyrow-${rowProps.key}`}>\r\n                  <tr {...rowProps}>\r\n                    {row.cells.map((cell, cellIndex) => {\r\n                      return (\r\n                        <td\r\n                          key={`bodycol-${cellIndex}`}\r\n                          {...cell.getCellProps({\r\n                            className: cell.column.collapse ? \"collapse\" : \"\",\r\n                          })}\r\n                        >\r\n                          {cell.isGrouped ? (\r\n                            <>\r\n                              <span {...row.getToggleRowExpandedProps()}>\r\n                                {row.isExpanded ? \"🔽 \" : \"▶️ \"}\r\n                              </span>\r\n                              {cell.render(\"Cell\")} ({row.subRows.length})\r\n                            </>\r\n                          ) : cell.isAggregated ? (\r\n                            cell.render(\"Aggregated\")\r\n                          ) : cell.isPlaceholder ? null : (\r\n                            cell.render(\"Cell\")\r\n                          )}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                  {row.isExpanded &&\r\n                    renderSubComponent({ row, visibleColumns })}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <Pagination\r\n        gotoPage={gotoPage}\r\n        previousPage={previousPage}\r\n        nextPage={nextPage}\r\n        canPreviousPage={canPreviousPage}\r\n        canNextPage={canNextPage}\r\n        pageCount={pageCount}\r\n        pageIndex={pageIndex}\r\n        pageOptions={pageOptions}\r\n        pageSize={pageSize}\r\n        setPageSize={setPageSize}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nTable.propTypes = {\r\n  data: PropTypes.arrayOf(PropTypes.object),\r\n  updateData: PropTypes.func,\r\n  columns: PropTypes.arrayOf(PropTypes.object),\r\n  skipReset: PropTypes.bool,\r\n  renderSubComponent: PropTypes.func,\r\n};\r\n\r\nexport default Table;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useTable, useSortBy } from \"react-table\";\r\n\r\nconst Table = ({ parentRow, childData }) => {\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Id\",\r\n        accessor: \"Id\",\r\n      },\r\n      {\r\n        Header: \"COA\",\r\n        accessor: \"COA\",\r\n      },\r\n      {\r\n        Header: \"Type\",\r\n        accessor: \"Type\",\r\n      },\r\n      {\r\n        Header: \"Currency\",\r\n        accessor: \"Currency\",\r\n      },\r\n      {\r\n        Header: \"AMC\",\r\n        accessor: \"AMC\",\r\n      },\r\n      {\r\n        Header: \"Channel\",\r\n        accessor: \"Channel\",\r\n      },\r\n      {\r\n        Header: \"Agent\",\r\n        accessor: \"Agent\",\r\n      },\r\n      {\r\n        Header: \"Plan\",\r\n        accessor: \"Plan\",\r\n      },\r\n      {\r\n        Header: \"DrCr\",\r\n        accessor: \"DrCr\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data: childData,\r\n      },\r\n      useSortBy\r\n    );\r\n\r\n  return (\r\n    <table\r\n      {...getTableProps()}\r\n      style={{\r\n        width: \"80%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        backgroundColor: \"floralwhite\",\r\n      }}\r\n    >\r\n      <thead>\r\n        {headerGroups.map((headerGroup) => (\r\n          <tr\r\n            key={`headerrow-${headerGroup.key}`}\r\n            {...headerGroup.getHeaderGroupProps()}\r\n          >\r\n            {headerGroup.headers.map((column, headerIndex) => (\r\n              <th key={`headercol-${headerIndex}`} {...column.getHeaderProps()}>\r\n                <div className=\"column-wrapper\">\r\n                  <div className=\"column-header\">\r\n                    <div\r\n                      {...column.getSortByToggleProps()}\r\n                      className=\"header-content\"\r\n                    >\r\n                      {column.render(\"Header\")}\r\n                      <div className=\"sort-icon-wrapper\">\r\n                        {column.isSorted ? (\r\n                          <>\r\n                            <svg\r\n                              width=\"10\"\r\n                              height=\"5\"\r\n                              viewBox=\"0 0 10 5\"\r\n                              className={`sort-icon sort-icon--asc ${\r\n                                !column.isSortedDesc && \"sort-icon--active\"\r\n                              }`}\r\n                            >\r\n                              <path\r\n                                fillRule=\"evenodd\"\r\n                                d=\"M4.767.276L8.395 4.04c.142.147.138.382-.01.524-.069.066-.16.104-.257.104H.872c-.205 0-.37-.166-.37-.37 0-.097.036-.189.103-.258L4.233.276c.142-.147.377-.151.524-.009l.01.01z\"\r\n                              ></path>\r\n                            </svg>\r\n                            <svg\r\n                              width=\"10\"\r\n                              height=\"5\"\r\n                              viewBox=\"0 0 10 5\"\r\n                              className={`sort-icon sort-icon--desc ${\r\n                                column.isSortedDesc && \"sort-icon--active\"\r\n                              }`}\r\n                            >\r\n                              <path\r\n                                fillRule=\"evenodd\"\r\n                                d=\"M4.233 4.724L.605.96C.463.814.467.579.615.437.684.371.775.333.872.333h7.256c.205 0 .37.166.37.37 0 .097-.036.189-.103.258L4.767 4.724c-.142.147-.377.151-.524.009l-.01-.01z\"\r\n                              ></path>\r\n                            </svg>\r\n                          </>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, bodyIndex) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()} key={`bodyrow-${bodyIndex}`}>\r\n              {row.cells.map((cell, cellIndex) => {\r\n                return (\r\n                  <td key={`bodycol-${cellIndex}`} {...cell.getCellProps()}>\r\n                    {cell.render(\"Cell\")}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nTable.propTypes = {\r\n  parentRow: PropTypes.object,\r\n  childData: PropTypes.array,\r\n};\r\n\r\nconst InnerTable = ({ parentRow, parentVisibleColumns, data }) => {\r\n  const [loading, setLoading] = React.useState(true);\r\n  const [childData, setChildDate] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setChildDate(data);\r\n      setLoading(false);\r\n    }, 500);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [data]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <tr>\r\n        <td colSpan={parentVisibleColumns.length}>\r\n          <div>⏳</div>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <tr>\r\n        <td colSpan={parentVisibleColumns.length}>\r\n          <Table parentRow={parentRow} childData={childData} />\r\n        </td>\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nInnerTable.propTypes = {\r\n  parentRow: PropTypes.object,\r\n  parentVisibleColumns: PropTypes.array,\r\n  data: PropTypes.array,\r\n};\r\n\r\nexport default InnerTable;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { isEqual, reduce } from \"lodash\";\r\nimport { fetchPayload, transformPayload } from \"../utils\";\r\nimport Table from \"./Table\";\r\nimport InnerTable from \"./InnerTable\";\r\nimport { NumberRangeColumnFilter, SelectColumnFilter } from \"./Filters\";\r\n\r\nconst initialResource = fetchPayload();\r\n\r\nconst Main = (props) => {\r\n  const [resource, setResource] = useState(initialResource);\r\n  // const [originalResource] = useState(resource);\r\n  const skipReset = useRef(false);\r\n\r\n  useEffect(() => {\r\n    skipReset.current = false;\r\n  }, [resource]);\r\n\r\n  // parent columns\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        id: \"expander\",\r\n        Header: () => null,\r\n        Cell: ({ row }) => (\r\n          <span {...row.getToggleRowExpandedProps()}>\r\n            {row.isExpanded ? \"➖\" : \"➕\"}\r\n          </span>\r\n        ),\r\n        SubCell: () => null,\r\n        Aggregated: () => null,\r\n        collapse: true,\r\n      },\r\n      {\r\n        Header: \"InvestorID\",\r\n        accessor: \"parent.InvestorID\",\r\n        aggregate: \"count\",\r\n        Aggregated: ({ value }) => `${value} investor ids`,\r\n      },\r\n      {\r\n        Header: \"InvestorName\",\r\n        accessor: \"parent.InvestorName\",\r\n        aggregate: \"count\",\r\n        Aggregated: ({ value }) => `${value} investor names`,\r\n        filter: \"fuzzyText\",\r\n      },\r\n      {\r\n        Header: \"SetupType\",\r\n        accessor: \"parent.SetupType\",\r\n        aggregate: \"count\",\r\n        Aggregated: ({ value }) => `${value} types`,\r\n        filter: \"includes\",\r\n        Filter: SelectColumnFilter,\r\n      },\r\n      {\r\n        Header: \"SetupDate\",\r\n        accessor: \"parent.SetupDate\",\r\n        aggregate: \"count\",\r\n        Aggregated: ({ value }) => `${value} setup date`,\r\n        filter: \"between\",\r\n        Filter: NumberRangeColumnFilter,\r\n        collapse: true,\r\n      },\r\n      {\r\n        Header: \"SetupBy\",\r\n        accessor: \"parent.SetupBy\",\r\n        aggregate: \"count\",\r\n        Aggregated: ({ value }) => `${value} setup-by`,\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // transformed data\r\n  const data = transformPayload(resource.payload.read());\r\n\r\n  // update data\r\n  const updateData = (rowIndex, columnId, value) => {\r\n    skipReset.current = true;\r\n    setResource((old) =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...row,\r\n            [columnId]: value,\r\n          };\r\n        }\r\n        return row;\r\n      })\r\n    );\r\n  };\r\n\r\n  // reset data\r\n  // const resetData = () => {\r\n  //   skipReset.current = true;\r\n  //   setResource(originalResource);\r\n  // };\r\n\r\n  // subcomponent\r\n  const renderSubComponent = useCallback(\r\n    ({ row, visibleColumns }) =>\r\n      visibleColumns.find((column) => column.id === \"expander\") ? (\r\n        <InnerTable\r\n          parentRow={row}\r\n          parentVisibleColumns={visibleColumns}\r\n          data={reduce(\r\n            data,\r\n            (result, value, key) => {\r\n              return isEqual(key, parseInt(row.id, 10))\r\n                ? result.concat(value.children)\r\n                : result;\r\n            },\r\n            []\r\n          )}\r\n        />\r\n      ) : undefined,\r\n    [data]\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {/* <button type=\"button\" onClick={resetData}>\r\n          Reset Data\r\n        </button> */}\r\n      <Table\r\n        columns={columns}\r\n        data={data}\r\n        updateData={updateData}\r\n        skipReset={skipReset.current}\r\n        renderSubComponent={renderSubComponent}\r\n        {...props}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nMain.propTypes = {\r\n  row: PropTypes.object,\r\n};\r\n\r\nexport default Main;\r\n","import { chain, pick } from \"lodash\";\r\n\r\nconst makeParent = (parent) => {\r\n  return pick(parent, [\r\n    \"InvestorID\",\r\n    \"InvestorName\",\r\n    \"SetupType\",\r\n    \"SetupDate\",\r\n    \"SetupBy\",\r\n  ]);\r\n};\r\n\r\nexport function transformPayload(payload) {\r\n  const { value } = payload;\r\n  return chain(value)\r\n    .groupBy((x) => x.InvestorID)\r\n    .map((val) => ({\r\n      parent: makeParent(val[0]),\r\n      children: val,\r\n    }))\r\n    .value();\r\n}\r\n"],"sourceRoot":""}